{"title":"Osagai","logo":"üÄÑÔ∏è","githubRepo":"HenriqueLimas/osagai","googleAnalytics":"UA-37033501-5","index":{"title":"Home","description":"Create WebComponents with no class, just functions","content":" Simple component Osagai export a define() function to create your WebComponent. Your component is a function that returns a template with the view definition Adding event listeners In addition, in you component function it will be injected some useful methods like query that you could query inside the component tree and add event listeners with the on method from osagai/events. An application Besides query, Osagai will also inject an update function that you can use for changing the data (or state) being used in the template function. This will check what it needs to be changed in the DOM and apply the re-render A real application This a \"real\" example of the Hacker News implemented with Osagai as a PWA. You can se the code on Github, or try it live here. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/osagai/./","children":{"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/osagai/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/osagai/docs/search.html"},"api-reference":{"description":"API reference","icon":"code-file","layout":"guide","title":"API reference","weight":2,"content":" Osagai is separated in different modules that you can import only what you need for implementing your custom element. These are the modules with a short description: osagai Main module with a function for defining your custom elements. dom Module with functions for manipulating the DOM tree of the custom element. events Module with functions for adding event listeners. lifecycles Module with functions for listening the lifecyles of the custom element. ","srcFilePath":"src/pages/docs/api-reference/index.md","id":"api-reference","location":"/docs/api-reference/","url":"/osagai/docs/api-reference/","children":{"events":{"title":"events","description":"Osagai events","layout":"guide","weight":3,"content":" Overview Module with functions for adding event listeners. ","srcFilePath":"src/pages/docs/api-reference/events/index.md","id":"events","location":"/docs/api-reference/events/","url":"/osagai/docs/api-reference/events/"},"dom":{"title":"dom","description":"Osagai dom","layout":"guide","weight":2,"content":" Overview Module with functions for manipulating the DOM tree of the custom element. ","srcFilePath":"src/pages/docs/api-reference/dom/index.md","id":"dom","location":"/docs/api-reference/dom/","url":"/osagai/docs/api-reference/dom/"},"lifecycles":{"title":"lifecycles","description":"Osagai lifecycles","layout":"guide","weight":3,"content":" Overview Module with functions for listening the lifecyles of the custom element. ","srcFilePath":"src/pages/docs/api-reference/lifecycles/index.md","id":"lifecycles","location":"/docs/api-reference/lifecycles/","url":"/osagai/docs/api-reference/lifecycles/"},"osagai":{"title":"osagai","description":"Osagai Top-Level API","layout":"guide","weight":1,"content":" Overview Define custom elements Osagai let you define your custom elements in a functional way, making than reusable and think about the separation of the component logic from the view. Custom elements can be defined using the define function, passing the name of the component with the Component function Component function Osagai Components are functions that will define your custom element. They need to return a Template function and can be used to add the logic of your custom element. Like adding event listeners, making api calls or initialize variables. Osagai will pass useful arguments to the Component like the element reference and methods like query and queryAll that you can use to query elements in the element DOM tree. Both methods return a promise resolving the value as the element that match the query. function Component({element, query, queryAll}) { /* ‚ú® Some magic here ‚ú® */ return () = Hello } Template function The template function is what will define the layout of your custom element and it will be executed during the connectedCallback lifecycle. The interface of the Template function is simple, it needs to return a string that will define the layout of the custom element: function Template() { return 'Hello' } If your components doesn't need a layout (Renderless component), you do not need to return a string, just execute your logic inside this function. function RenderlessTemplate() { window.addEventListener('resize', runSomething) } Osagai will pass as argument of the Template function the data needed for your layout. This is usually changed with the update function of the osagai/dom module. const initialData = {name: 'world'} function Template(data = initialData) { return Hello ${data.name} } Custom renderer Osagai consider the template of the custom element as string. Initialization and updates of the element are all based of strings, it uses innerHTML for the initialization and morphdom for the updates. But if you want to have a custom initialization and update, you can use the renderer option on the definition of the custom element. This is a function that receives the element and the template result with the current data. For example, you could use lit-html for manipulating the DOM in this way: import { define } from 'osagai' import { render, html } from 'lit-html'; function renderer(element, template) { render(template, element); } function LitComponent() { return () = htmlHello; } define('lit-component', LitComponent, { renderer }); Reference define define(name, Component[, options]) Defines a new custom element. Parameters name Name for the new custom element. Note that custom element names must contain a hyphen (ex. hello-world) Component Component is the function that will return a Template function that defines the layout of your custom element. Here you can run the logic of the component, like making api calls or add event listeners of the component elements options Optional BaseElement: element constructor that the component will extend. (Default HTMLElement) observeAttributes: array of strings with the attributes to observe and run attributeChangedCallback renderer: Custom renderer function to use during the render process. The function has two arguments element and template. Where element is the element reference and template is the result of the Template function with the current data. ...customElementOptions: All the other are options defined by the custom element spec (MDN link). ","srcFilePath":"src/pages/docs/api-reference/osagai/index.md","id":"osagai","location":"/docs/api-reference/osagai/","url":"/osagai/docs/api-reference/osagai/"}},"childIds":["osagai","dom","events","lifecycles"]},"getting-started":{"description":"Getting started with a Osagai.","icon":"arrow-right-rod","layout":"guide","title":"Getting Started","weight":1,"content":" Install Using package managers You can get it on npm. npm install osagai Or with yarn yarn add osagai Import from a CDN You can also import directly from unpkg import { define } from \"https://unpkg.com/osagai/osagai.mjs\"; CDN links Osagai are available over a CDN. Define a Web component Osagai comes with a function called define that defines a new custom element that you can use in your application. define receives the name of the custom element (it must contain a hyphen) and the Osagai component. The Osagai component is a function that returns a Template with a string representing the layout of the web component. import { define } from 'osagai' function MyComponent() { return () = Hi üëã! } define('waving-hand', MyComponent) Now, you just need to use your new custom element in your application. Modules Osagai is separated by different modules, in a way that you can import only what you need for your custom element. osagai This is the main module where you can find the function for defining your custom element. import { define } from 'osagai' dom This is the module with useful methods like update for efficiently update the DOM tree of your custom element import { update } from 'osagai/dom' events This is the module with useful methods like on for adding event listeners to components import { on } from 'osagai/events' lifecycles This is the module for the custom elements lifecyles like connectedCallback and disconnectedCallback import { onConnected, onDisconnected } from 'osagai/lifecycles' ","srcFilePath":"src/pages/docs/getting-started/index.md","id":"getting-started","location":"/docs/getting-started/","url":"/osagai/docs/getting-started/"}},"childIds":["getting-started","api-reference","search"]}},"childIds":["docs"]},"basePath":"/osagai"}